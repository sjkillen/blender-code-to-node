# Generated from NodeCode.g4 by ANTLR 4.10.1
from antlr4 import *
from io import StringIO
import sys
if sys.version_info[1] > 5:
    from typing import TextIO
else:
    from typing.io import TextIO


def serializedATN():
    return [
        4,0,22,149,6,-1,2,0,7,0,2,1,7,1,2,2,7,2,2,3,7,3,2,4,7,4,2,5,7,5,
        2,6,7,6,2,7,7,7,2,8,7,8,2,9,7,9,2,10,7,10,2,11,7,11,2,12,7,12,2,
        13,7,13,2,14,7,14,2,15,7,15,2,16,7,16,2,17,7,17,2,18,7,18,2,19,7,
        19,2,20,7,20,2,21,7,21,1,0,1,0,1,0,1,0,1,0,1,0,1,1,1,1,1,1,1,1,1,
        1,1,1,1,1,1,2,1,2,1,3,1,3,1,4,1,4,1,5,1,5,1,6,1,6,1,7,1,7,1,8,1,
        8,1,8,1,9,1,9,1,9,1,10,1,10,1,10,1,11,1,11,1,12,1,12,1,13,1,13,1,
        14,1,14,1,15,1,15,1,16,1,16,1,17,1,17,1,17,1,18,1,18,1,18,1,19,4,
        19,99,8,19,11,19,12,19,100,1,19,1,19,1,20,1,20,5,20,107,8,20,10,
        20,12,20,110,9,20,1,21,1,21,5,21,114,8,21,10,21,12,21,117,9,21,1,
        21,3,21,120,8,21,1,21,1,21,5,21,124,8,21,10,21,12,21,127,9,21,3,
        21,129,8,21,1,21,1,21,5,21,133,8,21,10,21,12,21,136,9,21,1,21,3,
        21,139,8,21,1,21,1,21,5,21,143,8,21,10,21,12,21,146,9,21,3,21,148,
        8,21,0,0,22,1,1,3,2,5,3,7,4,9,5,11,6,13,7,15,8,17,9,19,10,21,11,
        23,12,25,13,27,14,29,15,31,16,33,17,35,18,37,19,39,20,41,21,43,22,
        1,0,5,3,0,9,10,13,13,32,32,5,0,36,36,45,46,65,90,95,95,97,122,6,
        0,36,36,45,46,48,57,65,90,95,95,97,122,1,0,49,57,1,0,48,57,159,0,
        1,1,0,0,0,0,3,1,0,0,0,0,5,1,0,0,0,0,7,1,0,0,0,0,9,1,0,0,0,0,11,1,
        0,0,0,0,13,1,0,0,0,0,15,1,0,0,0,0,17,1,0,0,0,0,19,1,0,0,0,0,21,1,
        0,0,0,0,23,1,0,0,0,0,25,1,0,0,0,0,27,1,0,0,0,0,29,1,0,0,0,0,31,1,
        0,0,0,0,33,1,0,0,0,0,35,1,0,0,0,0,37,1,0,0,0,0,39,1,0,0,0,0,41,1,
        0,0,0,0,43,1,0,0,0,1,45,1,0,0,0,3,51,1,0,0,0,5,58,1,0,0,0,7,60,1,
        0,0,0,9,62,1,0,0,0,11,64,1,0,0,0,13,66,1,0,0,0,15,68,1,0,0,0,17,
        70,1,0,0,0,19,73,1,0,0,0,21,76,1,0,0,0,23,79,1,0,0,0,25,81,1,0,0,
        0,27,83,1,0,0,0,29,85,1,0,0,0,31,87,1,0,0,0,33,89,1,0,0,0,35,91,
        1,0,0,0,37,94,1,0,0,0,39,98,1,0,0,0,41,104,1,0,0,0,43,147,1,0,0,
        0,45,46,5,105,0,0,46,47,5,110,0,0,47,48,5,112,0,0,48,49,5,117,0,
        0,49,50,5,116,0,0,50,2,1,0,0,0,51,52,5,111,0,0,52,53,5,117,0,0,53,
        54,5,116,0,0,54,55,5,112,0,0,55,56,5,117,0,0,56,57,5,116,0,0,57,
        4,1,0,0,0,58,59,5,61,0,0,59,6,1,0,0,0,60,61,5,40,0,0,61,8,1,0,0,
        0,62,63,5,41,0,0,63,10,1,0,0,0,64,65,5,33,0,0,65,12,1,0,0,0,66,67,
        5,45,0,0,67,14,1,0,0,0,68,69,5,44,0,0,69,16,1,0,0,0,70,71,5,61,0,
        0,71,72,5,61,0,0,72,18,1,0,0,0,73,74,5,33,0,0,74,75,5,61,0,0,75,
        20,1,0,0,0,76,77,5,42,0,0,77,78,5,42,0,0,78,22,1,0,0,0,79,80,5,42,
        0,0,80,24,1,0,0,0,81,82,5,47,0,0,82,26,1,0,0,0,83,84,5,37,0,0,84,
        28,1,0,0,0,85,86,5,43,0,0,86,30,1,0,0,0,87,88,5,60,0,0,88,32,1,0,
        0,0,89,90,5,62,0,0,90,34,1,0,0,0,91,92,5,60,0,0,92,93,5,61,0,0,93,
        36,1,0,0,0,94,95,5,62,0,0,95,96,5,61,0,0,96,38,1,0,0,0,97,99,7,0,
        0,0,98,97,1,0,0,0,99,100,1,0,0,0,100,98,1,0,0,0,100,101,1,0,0,0,
        101,102,1,0,0,0,102,103,6,19,0,0,103,40,1,0,0,0,104,108,7,1,0,0,
        105,107,7,2,0,0,106,105,1,0,0,0,107,110,1,0,0,0,108,106,1,0,0,0,
        108,109,1,0,0,0,109,42,1,0,0,0,110,108,1,0,0,0,111,115,7,3,0,0,112,
        114,7,4,0,0,113,112,1,0,0,0,114,117,1,0,0,0,115,113,1,0,0,0,115,
        116,1,0,0,0,116,120,1,0,0,0,117,115,1,0,0,0,118,120,5,48,0,0,119,
        111,1,0,0,0,119,118,1,0,0,0,120,128,1,0,0,0,121,125,5,46,0,0,122,
        124,7,4,0,0,123,122,1,0,0,0,124,127,1,0,0,0,125,123,1,0,0,0,125,
        126,1,0,0,0,126,129,1,0,0,0,127,125,1,0,0,0,128,121,1,0,0,0,128,
        129,1,0,0,0,129,148,1,0,0,0,130,134,7,3,0,0,131,133,7,4,0,0,132,
        131,1,0,0,0,133,136,1,0,0,0,134,132,1,0,0,0,134,135,1,0,0,0,135,
        139,1,0,0,0,136,134,1,0,0,0,137,139,5,48,0,0,138,130,1,0,0,0,138,
        137,1,0,0,0,138,139,1,0,0,0,139,140,1,0,0,0,140,144,5,46,0,0,141,
        143,7,4,0,0,142,141,1,0,0,0,143,146,1,0,0,0,144,142,1,0,0,0,144,
        145,1,0,0,0,145,148,1,0,0,0,146,144,1,0,0,0,147,119,1,0,0,0,147,
        138,1,0,0,0,148,44,1,0,0,0,11,0,100,108,115,119,125,128,134,138,
        144,147,1,6,0,0
    ]

class NodeCodeLexer(Lexer):

    atn = ATNDeserializer().deserialize(serializedATN())

    decisionsToDFA = [ DFA(ds, i) for i, ds in enumerate(atn.decisionToState) ]

    T__0 = 1
    T__1 = 2
    T__2 = 3
    T__3 = 4
    T__4 = 5
    T__5 = 6
    T__6 = 7
    T__7 = 8
    T__8 = 9
    T__9 = 10
    T__10 = 11
    T__11 = 12
    T__12 = 13
    T__13 = 14
    T__14 = 15
    T__15 = 16
    T__16 = 17
    T__17 = 18
    T__18 = 19
    WS = 20
    IDENTIFIER = 21
    NUMBER = 22

    channelNames = [ u"DEFAULT_TOKEN_CHANNEL", u"HIDDEN" ]

    modeNames = [ "DEFAULT_MODE" ]

    literalNames = [ "<INVALID>",
            "'input'", "'output'", "'='", "'('", "')'", "'!'", "'-'", "','", 
            "'=='", "'!='", "'**'", "'*'", "'/'", "'%'", "'+'", "'<'", "'>'", 
            "'<='", "'>='" ]

    symbolicNames = [ "<INVALID>",
            "WS", "IDENTIFIER", "NUMBER" ]

    ruleNames = [ "T__0", "T__1", "T__2", "T__3", "T__4", "T__5", "T__6", 
                  "T__7", "T__8", "T__9", "T__10", "T__11", "T__12", "T__13", 
                  "T__14", "T__15", "T__16", "T__17", "T__18", "WS", "IDENTIFIER", 
                  "NUMBER" ]

    grammarFileName = "NodeCode.g4"

    def __init__(self, input=None, output:TextIO = sys.stdout):
        super().__init__(input, output)
        self.checkVersion("4.10.1")
        self._interp = LexerATNSimulator(self, self.atn, self.decisionsToDFA, PredictionContextCache())
        self._actions = None
        self._predicates = None


